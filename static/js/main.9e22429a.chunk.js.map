{"version":3,"sources":["assets/back.svg","assets/canada.svg","assets/usa.svg","assets/russia.svg","assets/uk.svg","assets/germany.svg","assets/france.svg","assets/china.svg","assets/italy.svg","components/card/index.jsx","components/board/index.jsx","utils/deck.js","App.js","index.js"],"names":["module","exports","Card","solved","dis","id","flipped","width","height","front","handleClick","type","className","cn","style","onClick","src","back","alt","Board","dimension","cards","map","card","key","includes","arr","_arr","slice","i","length","randomIndex","Math","floor","random","temp","shuffle","frontCanada","frontUsa","frontRussia","frontUk","frontGermany","frontFrance","frontChine","frontItaly","reduce","acc","App","useState","setCards","setFlipped","setDimension","setSolved","setDis","resetCards","sameCardClicked","isMatch","clickedCard","find","resizeBoard","min","document","documentElement","clientWidth","clientHeight","useEffect","initDeck","resizeListener","window","addEventListener","removeEventListener","setTimeout","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9e22429a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.33643a13.svg\";","module.exports = __webpack_public_path__ + \"static/media/canada.0e87203b.svg\";","module.exports = __webpack_public_path__ + \"static/media/usa.4a52512e.svg\";","module.exports = __webpack_public_path__ + \"static/media/russia.c1b811d0.svg\";","module.exports = __webpack_public_path__ + \"static/media/uk.3e0210d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/germany.599e2907.svg\";","module.exports = __webpack_public_path__ + \"static/media/france.a2397d31.svg\";","module.exports = __webpack_public_path__ + \"static/media/china.6a686ea5.svg\";","module.exports = __webpack_public_path__ + \"static/media/italy.15dd512f.svg\";","import React from 'react'\r\nimport cn from 'classnames'\r\n\r\nimport back from '../../assets/back.svg'\r\n\r\nimport './style.scss'\r\n\r\nconst Card = ({solved, dis, id, flipped,  width, height, front, handleClick, type}) => {\r\n\r\n  return (\r\n    <div className={cn('flip-container', {'flipped': flipped})}\r\n         style={{width, height}}\r\n         onClick={() => dis ? null : handleClick(id)}>\r\n\r\n      <div className='flipper'>\r\n\r\n        <img className={cn({'front': flipped}, {'back': !flipped})}\r\n             style={{width, height}}\r\n             src={flipped || solved ? front : back} alt={`card ${type}`}/>\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nimport Card from '../card'\r\n\r\nconst Board = ({solved, dis, dimension, cards, flipped, handleClick}) => {\r\n  return (\r\n    <div className='board'>\r\n      {cards.map(card => <Card\r\n        key={card.id}\r\n        id={card.id}\r\n        type={card.type}\r\n        width={dimension / 4.5}\r\n        height={dimension / 4.5}\r\n        front={card.front}\r\n        flipped={flipped.includes(card.id)}\r\n        handleClick={handleClick}\r\n        dis={dis || solved.includes(card.id)}\r\n        solved={solved.includes(card.id)}\r\n      />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board","import frontCanada from '../assets/canada.svg'\r\nimport frontUsa from '../assets/usa.svg'\r\nimport frontRussia from '../assets/russia.svg'\r\nimport frontUk from '../assets/uk.svg'\r\nimport frontGermany from '../assets/germany.svg'\r\nimport frontFrance from '../assets/france.svg'\r\nimport frontChine from '../assets/china.svg'\r\nimport frontItaly from '../assets/italy.svg'\r\n\r\nconst shuffle = (arr) => {\r\n  const _arr = arr.slice(0)\r\n  for (let i = 0; i < arr.length; i++) {\r\n    let randomIndex = Math.floor(Math.random() * (i + 1))\r\n    let temp = _arr[i]\r\n    _arr[i] = _arr[randomIndex]\r\n    _arr[randomIndex] = temp\r\n  }\r\n  return _arr\r\n}\r\n\r\nexport default () => {\r\n  let id = 0\r\n  const cards = [\r\n    {type: 'canada', front: frontCanada},\r\n    {type: 'usa', front: frontUsa},\r\n    {type: 'russia', front: frontRussia},\r\n    {type: 'uk', front: frontUk},\r\n    {type: 'germany', front: frontGermany},\r\n    {type: 'france', front: frontFrance},\r\n    {type: 'china', front: frontChine},\r\n    {type: 'italy', front: frontItaly},\r\n  ]\r\n\r\n    .reduce((acc, card) => {\r\n        acc = [...acc, {id: id++, ...card}]\r\n        acc = [...acc, {id: id++, ...card}]\r\n      return acc\r\n\r\n    }, [])\r\n  return shuffle(cards)\r\n}","import React, {useState, useEffect} from 'react'\n\nimport Board from './components/board'\n\nimport initDeck from './utils/deck'\n\nfunction App() {\n  const [cards, setCards] = useState([])\n  const [flipped, setFlipped] = useState([])\n  const [dimension, setDimension] = useState(400)\n  const [solved, setSolved] = useState([])\n  const [dis, setDis] = useState(false)\n\n  const handleClick = (id) => {\n    setDis(true)\n    if (flipped.length === 0) {\n      setFlipped([id])\n      setDis(false)\n    } else {\n      if (sameCardClicked(flipped, id)) return\n      setFlipped([flipped[0], id])\n      if (isMatch(id)) {\n        setSolved([...solved, flipped[0], id])\n        resetCards()\n      } else {\n       setTimeout(resetCards, 1500)\n      }\n    }\n  }\n\n  const resetCards = () => {\n    setFlipped([])\n    setDis(false)\n  }\n\n  const sameCardClicked = (id) => flipped.includes(id)\n\n  const isMatch = (id) => {\n    const clickedCard = cards.find(card => card.id === id)\n    const flippedCard = cards.find(card => flipped[0] === card.id)\n    return flippedCard.type === clickedCard.type\n  }\n\n  const resizeBoard = () => {\n    setDimension(Math.min(\n      document.documentElement.clientWidth,\n      document.documentElement.clientHeight,\n    ))\n  }\n\n  useEffect(() => {\n    resizeBoard()\n    setCards(initDeck())\n  }, [])\n\n  useEffect(() => {\n    const resizeListener = window.addEventListener('resize', resizeBoard)\n    return () => window.removeEventListener('resize', resizeListener)\n  }, [])\n\n  return (\n    <div className='app'>\n      <Board solved={solved}\n             dis={dis}\n             dimension={dimension}\n             cards={cards}\n             flipped={flipped}\n             handleClick={handleClick}/>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}